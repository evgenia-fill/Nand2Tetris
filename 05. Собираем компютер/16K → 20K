CHIP Memory20K {
    IN in[16], load, address[15];
    OUT out[16];

	PARTS:
    And(a=address[14], b=address[13], out=partialChecking);
    And(a=partialChecking, b=address[12], out=isLoadRAM4K);
    And(a=load, b=isLoadRAM4K, out=loadRAM4K);

	Nand(a=address[13], b=address[13], out=notAddress13);
	Nand(a=notAddress13, b=address[14], out=nandResult);
	Nand(a=nandResult, b=nandResult, out=isLoadScreen);

    And(a=load, b=isLoadScreen, out=loadScreen);

    Not(in=address[14], out=isLoadRAM16K);
    And(a=load, b=isLoadRAM16K, out=loadRAM16K);

    RAM16K(in=in, load=loadRAM16K, address=address[0..13], out=resultOfRAM16K);
    Screen(in=in, load=loadScreen, address=address[0..12], out=resultOfScreen);
    Keyboard(out=resultOfKeyboard);
    RAM4K(in=in, load=loadRAM4K, address=address[0..11], out=resultOfRAM4K);

	//Mux4Way16(a=resultOfRAM16K, b=resultOfRAM16K, c=resultOfScreen, d=resultOfKeyboard, sel=address[13..14], out=halfResult);
	Mux16(a=resultOfScreen, b=resultOfKeyboard, sel=address[13], out=resultScreenKeyboard);
  	Mux16(a=resultOfRAM16K, b=resultScreenKeyboard, sel=address[14], out=halfResult);
    Mux16(a=halfResult, b=resultOfRAM4K, sel=isLoadRAM4K, out=out);
}
