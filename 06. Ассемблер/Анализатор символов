using System.Collections.Generic;

namespace Assembler
{
    public class SymbolAnalyzer
    {
        private Dictionary<string, int> instrucionDictionary;

        public SymbolAnalyzer() =>
            InitializeSymbolsTable();
        
        public Dictionary<string, int> CreateSymbolsTable(string[] instructionsWithLabels,
            out string[] instructionsWithoutLabels)
        {
            var instructionList = new List<string>();
            var count = 0;
            foreach (var instruction in instructionsWithLabels)
                ProcessInstruction(instruction, ref count, instructionList);
            instructionsWithoutLabels = instructionList.ToArray();
            return instrucionDictionary;
        }

        private void InitializeSymbolsTable()
        {
            instrucionDictionary = new Dictionary<string, int>()
            {
				{"R0", 0}, {"R1", 1}, {"R2", 2}, {"R3", 3}, {"R4", 4}, 
				{"R5", 5}, {"R6", 6}, {"R7", 7}, {"R8", 8}, {"R9", 9},
				{"R10", 10}, {"R11", 11}, {"R12", 12}, {"R13", 13}, 
				{"R14", 14}, {"R15", 15}, {"SCREEN", 0x4000}, {"KBD", 0x6000}, 
				{"SP", 0}, {"LCL", 1}, {"ARG", 2}, {"THIS", 3}, {"THAT", 4}
            };
        }

        private void ProcessInstruction(string instruction, ref int count, List<string> instructionList)
        {
            if (instruction[0] == '(')
            {
                var mark = instruction[1..^1];
                instrucionDictionary[mark] = count;
            }
            else
            {
                instructionList.Add(instruction);
                count++;
            }
        }
    }
}
